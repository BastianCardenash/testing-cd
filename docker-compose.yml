version: '3.11'

services:
  mqtt_subscriber:
    build:
      context: ./mqtt_subscriber
      dockerfile: Dockerfile
    container_name: mqtt_subscriber
    restart: unless-stopped
    environment:
      - API_URL=${API_URL}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_TOPIC=${MQTT_TOPIC_INFO}
    networks:
      - django_network
    command: python -u subscriber.py

  mqtt_subscriber_validations:
    build:
      context: ./mqtt_subscriber_validations
      dockerfile: Dockerfile
    container_name: mqtt_subscriber_validations
    restart: unless-stopped
    environment:
      - API_URL=${API_URL}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_TOPIC=${MQTT_TOPIC_VALIDATIONS}
    networks:
      - django_network
    command: python -u subscriber.py

  mqtt_subscriber_history:
    build:
      context: ./mqtt_subscriber_history
      dockerfile: Dockerfile
    container_name: mqtt_subscriber_history
    restart: unless-stopped
    environment:
      - API_URL=${API_URL}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_TOPIC=${MQTT_TOPIC_HISTORY}
    networks:
      - django_network
    command: python -u subscriber.py

  mqtt_subscriber_requests:
    build:
      context: ./mqtt_subscriber_requests_listen
      dockerfile: Dockerfile
    container_name: mqtt_subscriber_requests
    restart: unless-stopped
    environment:
      - API_URL=${API_URL}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_TOPIC=${MQTT_TOPIC_REQUESTS}
    networks:
      - django_network
    command: python -u subscriber.py

  django:
    build:
      context: ./coolgoat
      dockerfile: Dockerfile
    container_name: django_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
    volumes:
      - ./coolgoat:/app
    networks:
      - django_network
    # comand temporal para crear migraciones y correrlas (antes solo se corrian)
    command: >
      sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  db:
    image: postgres:15
    container_name: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - django_network

volumes:
  postgres_data:


networks:
  django_network:
    driver: bridge
